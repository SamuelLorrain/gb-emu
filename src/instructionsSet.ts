import { alias } from './instructionAlias';
import * as instructions from './instructions';
import { Cpu } from "./cpu";

export const instructionsSet = function(cpu: Cpu, instruction: number) {
    switch(instruction) {

        // 0x0z
        case alias.NOP: break;
        case alias.LD_BC_D16: instructions.ld_r16_nn(cpu, 'bc'); break;
        case alias.LD_REF_BC_A: instructions.ld_ref_r16_r8(cpu, 'bc' ,'a'); break;
        case alias.INC_BC: instructions.inc_r16(cpu, 'bc'); break;
        case alias.INC_B: instructions.inc_r8(cpu, 'b'); break;
        case alias.DEC_B: instructions.dec_r8(cpu, 'b'); break;
        case alias.LD_B_D8: instructions.ld_r8_n(cpu, 'b'); break;
        case alias.RLCA: instructions.rlca(cpu); break;
        case alias.LD_REF_A16_SP: instructions.ld_ref_nn_r16(cpu, 'sp'); break;
        case alias.ADD_HL_BC: instructions.add_r16_r16(cpu, 'hl', 'bc'); break;
        case alias.LD_A_REF_BC: instructions.ld_r8_ref_r16(cpu, 'a', 'bc'); break;
        case alias.DEC_BC: instructions.dec_r16(cpu, 'bc'); break;
        case alias.INC_C: instructions.inc_r8(cpu, 'c'); break;
        case alias.DEC_C: instructions.dec_r8(cpu, 'c'); break;
        case alias.LD_C_D8: instructions.ld_r8_n(cpu, 'c'); break;
        case alias.RRCA: instructions.rrca(cpu); break;

        // 0x1z
        case alias.STOP_0: console.log("STOPPING"); break;
        case alias.LD_DE_D16: instructions.ld_r16_nn(cpu, 'de'); break;
        case alias.LD_REF_DE_A: instructions.ld_ref_r16_r8(cpu, 'de' ,'a'); break;
        case alias.INC_DE: instructions.inc_r16(cpu, 'de'); break;
        case alias.INC_D: instructions.inc_r8(cpu, 'd'); break;
        case alias.DEC_D: instructions.dec_r8(cpu, 'd'); break;
        case alias.LD_D_D8: instructions.ld_r8_n(cpu, 'd'); break;
        case alias.RLA: instructions.rla(cpu); break;
        case alias.JR_R8: instructions.jr_r8(cpu); break;
        case alias.ADD_HL_DE: instructions.add_r16_r16(cpu, 'hl', 'de'); break;
        case alias.LD_A_REF_DE: instructions.ld_r8_ref_r16(cpu, 'a', 'bc'); break;
        case alias.DEC_DE: instructions.dec_r16(cpu, 'de'); break;
        case alias.INC_E: instructions.inc_r8(cpu, 'e'); break;
        case alias.DEC_E: instructions.dec_r8(cpu, 'e'); break;
        case alias.LD_E_D8: instructions.ld_r8_n(cpu, 'e'); break;
        case alias.RRA: instructions.rra(cpu); break;

        // 0x2z
        case alias.JR_NZ_R8: instructions.jr_nz_r8(cpu); break;
        case alias.LD_HL_D16: instructions.ld_r16_nn(cpu, 'hl'); break;
        case alias.LD_REF_HL_PLUS_A: instructions.ld_ref_r16_plus_r8(cpu, 'hl', 'a'); break;
        case alias.INC_HL: instructions.inc_r16(cpu, 'hl'); break;
        case alias.INC_H: instructions.inc_r8(cpu, 'h'); break;
        case alias.DEC_H: instructions.dec_r8(cpu, 'h'); break;
        case alias.LD_H_D8: instructions.ld_r8_n(cpu, 'h'); break;
        case alias.DAA: instructions.daa(cpu); break;
        case alias.JR_Z_R8: instructions.jr_z_r8(cpu); break;
        case alias.ADD_HL_HL: instructions.add_r16_r16(cpu, 'hl', 'de'); break;
        case alias.LD_A_REF_HL_PLUS: instructions.ld_r8_ref_r16_plus(cpu, 'hl', 'a'); break;
        case alias.DEC_HL: instructions.dec_r16(cpu, 'hl'); break;
        case alias.INC_L: instructions.inc_r8(cpu, 'l'); break;
        case alias.DEC_L: instructions.dec_r8(cpu, 'l'); break;
        case alias.LD_L_D8: instructions.ld_r8_n(cpu, 'l'); break;
        case alias.CPL: instructions.cpl(cpu, 'a'); break;

        // 0x3z
        case alias.JR_NC_R8: instructions.jr_nc_r8(cpu); break;
        case alias.LD_SP_D16: instructions.ld_r16_nn(cpu, 'sp'); break;
        case alias.LD_REF_HL_MINUS_A: instructions.ld_ref_r16_minus_r8(cpu, 'hl', 'a'); break;
        case alias.INC_SP: instructions.inc_r16(cpu, 'sp'); break;
        case alias.INC_REF_HL: instructions.inc_ref_r16(cpu, 'hl'); break;
        case alias.DEC_REF_HL: instructions.dec_ref_r16(cpu, 'hl'); break;
        case alias.LD_REF_HL_D8: instructions.ld_ref_r16_d8(cpu, 'hl'); break;
        case alias.SCF: instructions.scf(cpu); break;
        case alias.JR_C_R8: instructions.jr_c_r8(cpu); break;
        case alias.ADD_HL_SP: instructions.add_r16_r16(cpu, 'hl', 'de'); break;
        case alias.LD_A_REF_HL_MINUS: instructions.ld_r8_ref_r16_minus(cpu, 'hl', 'a'); break;
        case alias.DEC_SP: instructions.dec_r16(cpu, 'sp'); break;
        case alias.INC_A: instructions.inc_r8(cpu, 'a'); break;
        case alias.DEC_A: instructions.dec_r8(cpu, 'a'); break;
        case alias.LD_A_D8: instructions.ld_r8_n(cpu, 'b'); break;
        case alias.CCF: instructions.ccf(cpu); break;


        // 0x4z
        case alias.LD_B_B: instructions.ld_r8_r8(cpu, 'b', 'b'); break;
        case alias.LD_B_C: instructions.ld_r8_r8(cpu, 'b', 'c'); break;
        case alias.LD_B_D: instructions.ld_r8_r8(cpu, 'b', 'd'); break;
        case alias.LD_B_E: instructions.ld_r8_r8(cpu, 'b', 'e'); break;
        case alias.LD_B_H: instructions.ld_r8_r8(cpu, 'b', 'h'); break;
        case alias.LD_B_L: instructions.ld_r8_r8(cpu, 'b', 'l'); break;
        case alias.LD_B_REF_HL: instructions.ld_r8_ref_r16(cpu, 'b', 'hl'); break;
        case alias.LD_B_A: instructions.ld_r8_r8(cpu, 'b', 'a'); break;
        case alias.LD_C_B: instructions.ld_r8_r8(cpu, 'c', 'b'); break;
        case alias.LD_C_C: instructions.ld_r8_r8(cpu, 'c', 'c'); break;
        case alias.LD_C_D: instructions.ld_r8_r8(cpu, 'c', 'd'); break;
        case alias.LD_C_E: instructions.ld_r8_r8(cpu, 'c', 'e'); break;
        case alias.LD_C_H: instructions.ld_r8_r8(cpu, 'c', 'h'); break;
        case alias.LD_C_L: instructions.ld_r8_r8(cpu, 'c', 'l'); break;
        case alias.LD_C_REF_HL: instructions.ld_r8_ref_r16(cpu, 'c', 'hl'); break;
        case alias.LD_C_A: instructions.ld_r8_r8(cpu, 'c', 'a'); break;

        // 0x5z
        case alias.LD_D_B: instructions.ld_r8_r8(cpu, 'd', 'b'); break;
        case alias.LD_D_C: instructions.ld_r8_r8(cpu, 'd', 'c'); break;
        case alias.LD_D_D: instructions.ld_r8_r8(cpu, 'd', 'd'); break;
        case alias.LD_D_E: instructions.ld_r8_r8(cpu, 'd', 'e'); break;
        case alias.LD_D_H: instructions.ld_r8_r8(cpu, 'd', 'h'); break;
        case alias.LD_D_L: instructions.ld_r8_r8(cpu, 'd', 'l'); break;
        case alias.LD_D_REF_HL: instructions.ld_r8_ref_r16(cpu, 'd', 'hl'); break;
        case alias.LD_D_A: instructions.ld_r8_r8(cpu, 'd', 'a'); break;
        case alias.LD_E_B: instructions.ld_r8_r8(cpu, 'e', 'b'); break;
        case alias.LD_E_C: instructions.ld_r8_r8(cpu, 'e', 'c'); break;
        case alias.LD_E_D: instructions.ld_r8_r8(cpu, 'e', 'd'); break;
        case alias.LD_E_E: instructions.ld_r8_r8(cpu, 'e', 'e'); break;
        case alias.LD_E_H: instructions.ld_r8_r8(cpu, 'e', 'h'); break;
        case alias.LD_E_L: instructions.ld_r8_r8(cpu, 'e', 'l'); break;
        case alias.LD_E_REF_HL: instructions.ld_r8_ref_r16(cpu, 'e', 'hl'); break;
        case alias.LD_E_A: instructions.ld_r8_r8(cpu, 'e', 'a'); break;

        // 0x6z
        case alias.LD_H_B: instructions.ld_r8_r8(cpu, 'h', 'b'); break;
        case alias.LD_H_C: instructions.ld_r8_r8(cpu, 'h', 'c'); break;
        case alias.LD_H_D: instructions.ld_r8_r8(cpu, 'h', 'd'); break;
        case alias.LD_H_E: instructions.ld_r8_r8(cpu, 'h', 'e'); break;
        case alias.LD_H_H: instructions.ld_r8_r8(cpu, 'h', 'h'); break;
        case alias.LD_H_L: instructions.ld_r8_r8(cpu, 'h', 'l'); break;
        case alias.LD_H_REF_HL: instructions.ld_r8_ref_r16(cpu, 'h', 'hl'); break;
        case alias.LD_H_A: instructions.ld_r8_r8(cpu, 'h', 'a'); break;
        case alias.LD_L_B: instructions.ld_r8_r8(cpu, 'l', 'b'); break;
        case alias.LD_L_C: instructions.ld_r8_r8(cpu, 'l', 'c'); break;
        case alias.LD_L_D: instructions.ld_r8_r8(cpu, 'l', 'd'); break;
        case alias.LD_L_E: instructions.ld_r8_r8(cpu, 'l', 'e'); break;
        case alias.LD_L_H: instructions.ld_r8_r8(cpu, 'l', 'h'); break;
        case alias.LD_L_L: instructions.ld_r8_r8(cpu, 'l', 'l'); break;
        case alias.LD_L_REF_HL: instructions.ld_r8_ref_r16(cpu, 'l', 'hl'); break;
        case alias.LD_L_A: instructions.ld_r8_r8(cpu, 'l', 'a'); break;

        // 0x7z
        case alias.LD_REF_HL_B: instructions.ld_ref_r16_r8(cpu, 'hl' ,'b'); break;
        case alias.LD_REF_HL_C: instructions.ld_ref_r16_r8(cpu, 'hl' ,'c'); break;
        case alias.LD_REF_HL_D: instructions.ld_ref_r16_r8(cpu, 'hl' ,'d'); break;
        case alias.LD_REF_HL_E: instructions.ld_ref_r16_r8(cpu, 'hl' ,'e'); break;
        case alias.LD_REF_HL_H: instructions.ld_ref_r16_r8(cpu, 'hl' ,'h'); break;
        case alias.LD_REF_HL_L: instructions.ld_ref_r16_r8(cpu, 'hl' ,'l'); break;
        case alias.HALT: console.log("HALT"); break;
        case alias.LD_REF_HL_A: instructions.ld_ref_r16_r8(cpu, 'hl' ,'a'); break;
        case alias.LD_A_B: instructions.ld_r8_r8(cpu, 'a', 'b'); break;
        case alias.LD_A_C: instructions.ld_r8_r8(cpu, 'a', 'c'); break;
        case alias.LD_A_D: instructions.ld_r8_r8(cpu, 'a', 'd'); break;
        case alias.LD_A_E: instructions.ld_r8_r8(cpu, 'a', 'e'); break;
        case alias.LD_A_REF_HL: instructions.ld_r8_ref_r16(cpu, 'a', 'hl'); break;
        case alias.LD_A_H: instructions.ld_r8_r8(cpu, 'a', 'h'); break;
        case alias.LD_A_L: instructions.ld_r8_r8(cpu, 'a', 'l'); break;
        case alias.LD_A_A: instructions.ld_r8_r8(cpu, 'a', 'a'); break;

        // 0x8z
        case alias.ADD_A_B: instructions.add_r8_r8(cpu, 'a', 'b'); break;
        case alias.ADD_A_C: instructions.add_r8_r8(cpu, 'a', 'c'); break;
        case alias.ADD_A_D: instructions.add_r8_r8(cpu, 'a', 'd'); break;
        case alias.ADD_A_E: instructions.add_r8_r8(cpu, 'a', 'e'); break;
        case alias.ADD_A_H: instructions.add_r8_r8(cpu, 'a', 'h'); break;
        case alias.ADD_A_L: instructions.add_r8_r8(cpu, 'a', 'l'); break;
        case alias.ADD_A_REF_HL: instructions.add_r8_ref_r16(cpu, 'a', 'hl'); break;
        case alias.ADD_A_A: instructions.add_r8_r8(cpu, 'a', 'a'); break;
        case alias.ADC_A_B: instructions.adc_r8_r8(cpu, 'a', 'b'); break;
        case alias.ADC_A_C: instructions.adc_r8_r8(cpu, 'a', 'c'); break;
        case alias.ADC_A_D: instructions.adc_r8_r8(cpu, 'a', 'd'); break;
        case alias.ADC_A_E: instructions.adc_r8_r8(cpu, 'a', 'e'); break;
        case alias.ADC_A_H: instructions.adc_r8_r8(cpu, 'a', 'h'); break;
        case alias.ADC_A_L: instructions.adc_r8_r8(cpu, 'a', 'l'); break;
        case alias.ADC_A_REF_HL: instructions.adc_r8_ref_r16(cpu, 'a', 'l'); break;
        case alias.ADC_A_A: instructions.adc_r8_r8(cpu, 'a', 'a'); break;

        // 0x9z
        case alias.SUB_B: instructions.sub_r8_r8(cpu, 'a', 'b'); break;
        case alias.SUB_C: instructions.sub_r8_r8(cpu, 'a', 'c'); break;
        case alias.SUB_D: instructions.sub_r8_r8(cpu, 'a', 'd'); break;
        case alias.SUB_E: instructions.sub_r8_r8(cpu, 'a', 'e'); break;
        case alias.SUB_H: instructions.sub_r8_r8(cpu, 'a', 'h'); break;
        case alias.SUB_L: instructions.sub_r8_r8(cpu, 'a', 'l'); break;
        case alias.SUB_REF_HL: instructions.sub_r8_ref_r16(cpu, 'a', 'hl'); break;
        case alias.SUB_A: instructions.sub_r8_r8(cpu, 'a', 'a'); break;
        case alias.SBC_A_B: instructions.sbc_r8_r8(cpu, 'a', 'b'); break;
        case alias.SBC_A_C: instructions.sbc_r8_r8(cpu, 'a', 'c'); break;
        case alias.SBC_A_D: instructions.sbc_r8_r8(cpu, 'a', 'd'); break;
        case alias.SBC_A_E: instructions.sbc_r8_r8(cpu, 'a', 'e'); break;
        case alias.SBC_A_H: instructions.sbc_r8_r8(cpu, 'a', 'h'); break;
        case alias.SBC_A_L: instructions.sbc_r8_r8(cpu, 'a', 'l'); break;
        case alias.SBC_A_REF_HL: instructions.sbc_r8_ref_r16(cpu, 'a', 'hl'); break;
        case alias.SBC_A_A: instructions.sbc_r8_r8(cpu, 'a', 'a'); break;

        // 0xaz
        case alias.AND_B: instructions.and_r8_r8(cpu, 'a', 'b'); break;
        case alias.AND_C: instructions.and_r8_r8(cpu, 'a', 'c'); break;
        case alias.AND_D: instructions.and_r8_r8(cpu, 'a', 'd'); break;
        case alias.AND_E: instructions.and_r8_r8(cpu, 'a', 'e'); break;
        case alias.AND_H: instructions.and_r8_r8(cpu, 'a', 'h'); break;
        case alias.AND_L: instructions.and_r8_r8(cpu, 'a', 'l'); break;
        case alias.AND_REF_HL: instructions.and_r8_ref_r16(cpu, 'a', 'hl'); break;
        case alias.AND_A: instructions.and_r8_r8(cpu, 'a', 'a'); break;
        case alias.XOR_B: instructions.xor_r8_r8(cpu, 'a', 'b'); break;
        case alias.XOR_C: instructions.xor_r8_r8(cpu, 'a', 'c'); break;
        case alias.XOR_D: instructions.xor_r8_r8(cpu, 'a', 'd'); break;
        case alias.XOR_E: instructions.xor_r8_r8(cpu, 'a', 'e'); break;
        case alias.XOR_H: instructions.xor_r8_r8(cpu, 'a', 'h'); break;
        case alias.XOR_L: instructions.xor_r8_r8(cpu, 'a', 'l'); break;
        case alias.XOR_REF_HL: instructions.xor_r8_ref_r16(cpu, 'a', 'hl'); break;
        case alias.XOR_A: instructions.xor_r8_r8(cpu, 'a', 'a'); break;

        // 0xbz
        case alias.OR_B: instructions.or_r8_r8(cpu, 'a', 'b'); break;
        case alias.OR_C: instructions.or_r8_r8(cpu, 'a', 'c'); break;
        case alias.OR_D: instructions.or_r8_r8(cpu, 'a', 'd'); break;
        case alias.OR_E: instructions.or_r8_r8(cpu, 'a', 'e'); break;
        case alias.OR_H: instructions.or_r8_r8(cpu, 'a', 'h'); break;
        case alias.OR_L: instructions.or_r8_r8(cpu, 'a', 'l'); break;
        case alias.OR_REF_HL: instructions.or_r8_ref_r16(cpu, 'a', 'hl'); break;
        case alias.OR_A: instructions.or_r8_r8(cpu, 'a', 'a'); break;
        case alias.CP_B: instructions.cp_r8_r8(cpu, 'a', 'b'); break;
        case alias.CP_C: instructions.cp_r8_r8(cpu, 'a', 'c'); break;
        case alias.CP_D: instructions.cp_r8_r8(cpu, 'a', 'd'); break;
        case alias.CP_E: instructions.cp_r8_r8(cpu, 'a', 'e'); break;
        case alias.CP_H: instructions.cp_r8_r8(cpu, 'a', 'h'); break;
        case alias.CP_L: instructions.cp_r8_r8(cpu, 'a', 'l'); break;
        case alias.CP_REF_HL: instructions.cp_r8_ref_r16(cpu, 'a', 'hl'); break;
        case alias.CP_A: instructions.cp_r8_r8(cpu, 'a', 'a'); break;

        // 0xcz
        case alias.RET_NZ: instructions.ret_nz(cpu); break;
        case alias.POP_BC: instructions.pop_r16(cpu, 'bc'); break;
        case alias.JP_NZ_A16: instructions.jp_nz_a16(cpu); break;
        case alias.JP_A16: instructions.jp_a16(cpu); break;
        case alias.CALL_NZ_A16: instructions.call_nz_a16(cpu); break;
        case alias.PUSH_BC: instructions.push_r16(cpu, 'bc'); break;
        case alias.ADD_A_D8: instructions.add_r8_d8(cpu, 'a'); break;
        case alias.RST_00H: instructions.rst_n(cpu, 0x0); break;
        case alias.RET_Z: instructions.ret_z(cpu); break;
        case alias.RET: instructions.ret(cpu); break;
        case alias.JP_Z_A16: instructions.jp_z_a16(cpu); break;
        case alias.PREFIX_CB: handlePrefixCB(cpu) ; break;
        case alias.CALL_Z_A16: instructions.call_z_a16(cpu); break;
        case alias.CALL_A16: instructions.call_a16(cpu); break;
        case alias.ADC_A_D8: instructions.adc_r8_d8(cpu, 'a'); break;
        case alias.RST_08H: instructions.rst_n(cpu, 0x08); break;

        // 0xdz
        case alias.RET_NC: instructions.ret_nc(cpu); break;
        case alias.POP_BC: instructions.pop_r16(cpu, 'de'); break;
        case alias.JP_NZ_A16: instructions.jp_nc_a16(cpu); break;
        case 0xD3: throw new Error("0xD3 does not exists"); break;
        case alias.CALL_NC_A16: instructions.call_nc_a16(cpu); break;
        case alias.PUSH_DE: instructions.push_r16(cpu, 'de'); break;
        case alias.SUB_D8: instructions.sub_r8_d8(cpu, 'a'); break;
        case alias.RST_10H: instructions.rst_n(cpu, 0x10); break;
        case alias.RET_C: instructions.ret_c(cpu); break;
        case alias.RETI: instructions.reti(cpu); break;
        case alias.JP_C_A16: instructions.jp_c_a16(cpu); break;
        case 0xDB: throw new Error("0xDB does not exists"); break;
        case alias.CALL_C_A16: instructions.call_c_a16(cpu); break;
        case alias.SBC_D8: instructions.sbc_r8_d8(cpu, 'a'); break;
        case alias.RST_18H: instructions.rst_n(cpu, 0x18); break;

        // 0xez
        case alias.LDH_REF_A8_A: instructions.ldh_ref_d8_r8(cpu, 'a'); break;
        case alias.POP_HL: instructions.pop_r16(cpu, 'hl'); break;
        case alias.LD_REF_C_A: instructions.ld_ref_c_r8(cpu, 'a'); break;
        case 0xE3: throw new Error("0xE3 does not exists"); break;
        case 0xE4: throw new Error("0xE4 does not exists"); break;
        case alias.PUSH_HL: instructions.push_r16(cpu, 'hl'); break;
        case alias.AND_D8: instructions.and_r8_d8(cpu, 'a'); break;
        case alias.RST_20H: instructions.rst_n(cpu, 0x20); break;
        case alias.ADD_SP_R8: instructions.add_r16_d8signed(cpu, 'sp'); break;
        case alias.JP_REF_HL: instructions.jp_ref_r16(cpu, 'hl'); break;
        case alias.LD_REF_A16_A: instructions.ld_ref_d16_r8(cpu, 'a'); break;
        case 0xEB: throw new Error("0xEB does not exists"); break;
        case 0xEC: throw new Error("0xEC does not exists"); break;
        case 0xED: throw new Error("0xED does not exists"); break;
        case alias.XOR_D8: instructions.xor_d8(cpu); break;
        case alias.RST_28H: instructions.rst_n(cpu, 0x28); break;

        // 0xfz
        case alias.LDH_A_REF_A8: instructions.ldh_r8_ref_d8(cpu, 'a'); break;
        case alias.POP_AF: instructions.pop_r16(cpu, 'af'); break;
        case alias.LD_A_REF_C: instructions.ld_r8_ref_c(cpu, 'a'); break;
        case alias.DI: cpu.disableInterruptNext(); break;
        case 0xF4: throw new Error("0xf4 does not exists"); break;
        case alias.PUSH_AF: instructions.push_r16(cpu, 'af'); break;
        case alias.OR_D8: instructions.or_r8_d8(cpu, 'a'); break;
        case alias.RST_30H: instructions.rst_n(cpu, 0x30); break;
        case alias.LD_HL_SP_PLUS_R8: instructions.ld_hl_sp_plus_d8(cpu); break;
        case alias.LD_SP_HL: instructions.ld_r16_r16(cpu, 'sp', 'hl'); break;
        case alias.LD_A_REF_A16: instructions.ld_r8_ref_d16(cpu, 'a'); break;
        case alias.EI: cpu.enableInterruptNext(); break;
        case 0xFC: throw new Error('0xfc does not exists'); break;
        case 0xFD: throw new Error('0xfd does not exists'); break;
        case alias.CP_D8: instructions.cp_r8_d8(cpu, 'a'); break;
        case alias.RST_38H: instructions.rst_n(cpu, 0x38); break;
        default: throw Error(`${instructions} doesn't exist`); break;
    }
}

function handlePrefixCB(cpu: Cpu) {
    const instruction = cpu.fetchNext();
    switch (instruction) {
        case alias.RLC_B: instructions.rlc_r8(cpu, 'b'); break;
        case alias.RLC_C: instructions.rlc_r8(cpu, 'c'); break;
        case alias.RLC_D: instructions.rlc_r8(cpu, 'd'); break;
        case alias.RLC_E: instructions.rlc_r8(cpu, 'e'); break;
        case alias.RLC_H: instructions.rlc_r8(cpu, 'h'); break;
        case alias.RLC_L: instructions.rlc_r8(cpu, 'l'); break;
        case alias.RLC_REF_HL: instructions.rlc_ref_r16(cpu, 'hl'); break;
        case alias.RLC_A: instructions.rlc_r8(cpu, 'a'); break;
        case alias.RRC_B: instructions.rrc_r8(cpu, 'b'); break;
        case alias.RRC_C: instructions.rrc_r8(cpu, 'c'); break;
        case alias.RRC_D: instructions.rrc_r8(cpu, 'd'); break;
        case alias.RRC_E: instructions.rrc_r8(cpu, 'e'); break;
        case alias.RRC_H: instructions.rrc_r8(cpu, 'h'); break;
        case alias.RRC_L: instructions.rrc_r8(cpu, 'l'); break;
        case alias.RRC_REF_HL: instructions.rlc_ref_r16(cpu, 'hl'); break;
        case alias.RRC_A: instructions.rrc_r8(cpu, 'a'); break;
        case alias.RL_B: instructions.rl_r8(cpu, 'b'); break;
        case alias.RL_C: instructions.rl_r8(cpu, 'c'); break;
        case alias.RL_D: instructions.rl_r8(cpu, 'd'); break;
        case alias.RL_E: instructions.rl_r8(cpu, 'e'); break;
        case alias.RL_H: instructions.rl_r8(cpu, 'h'); break;
        case alias.RL_L: instructions.rl_r8(cpu, 'l'); break;
        case alias.RL_REF_HL: instructions.rl_ref_r16(cpu, 'hl'); break;
        case alias.RL_A: instructions.rl_r8(cpu, 'a'); break;
        case alias.RR_B: instructions.rr_r8(cpu, 'b'); break;
        case alias.RR_C: instructions.rr_r8(cpu, 'c'); break;
        case alias.RR_D: instructions.rr_r8(cpu, 'd'); break;
        case alias.RR_E: instructions.rr_r8(cpu, 'e'); break;
        case alias.RR_H: instructions.rr_r8(cpu, 'h'); break;
        case alias.RR_L: instructions.rr_r8(cpu, 'l'); break;
        case alias.RR_REF_HL: instructions.rr_ref_r16(cpu, 'hl'); break;
        case alias.RR_A: instructions.rr_r8(cpu, 'a'); break;
        case alias.SLA_B: instructions.sla_r8(cpu, 'b'); break;
        case alias.SLA_C: instructions.sla_r8(cpu, 'c'); break;
        case alias.SLA_D: instructions.sla_r8(cpu, 'd'); break;
        case alias.SLA_E: instructions.sla_r8(cpu, 'e'); break;
        case alias.SLA_H: instructions.sla_r8(cpu, 'h'); break;
        case alias.SLA_L: instructions.sla_r8(cpu, 'l'); break;
        case alias.SLA_REF_HL: instructions.sla_ref_r16(cpu, 'hl'); break;
        case alias.SLA_A: instructions.sla_r8(cpu, 'a'); break;
        case alias.SRA_B: instructions.sra_r8(cpu, 'b'); break;
        case alias.SRA_C: instructions.sra_r8(cpu, 'c'); break;
        case alias.SRA_D: instructions.sra_r8(cpu, 'd'); break;
        case alias.SRA_E: instructions.sra_r8(cpu, 'e'); break;
        case alias.SRA_H: instructions.sra_r8(cpu, 'h'); break;
        case alias.SRA_L: instructions.sra_r8(cpu, 'l'); break;
        case alias.SRA_REF_HL: instructions.sra_ref_r16(cpu, 'hl'); break;
        case alias.SRA_A: instructions.sra_r8(cpu, 'a'); break;
        case alias.SWAP_B: instructions.swap_r8(cpu, 'b'); break;
        case alias.SWAP_C: instructions.swap_r8(cpu, 'c'); break;
        case alias.SWAP_D: instructions.swap_r8(cpu, 'd'); break;
        case alias.SWAP_E: instructions.swap_r8(cpu, 'e'); break;
        case alias.SWAP_H: instructions.swap_r8(cpu, 'h'); break;
        case alias.SWAP_L: instructions.swap_r8(cpu, 'l'); break;
        case alias.SWAP_REF_HL: instructions.swap_ref_r16(cpu, 'hl'); break;
        case alias.SWAP_A: instructions.swap_r8(cpu, 'a'); break;
        case alias.SRL_B: instructions.srl_r8(cpu, 'b'); break;
        case alias.SRL_C: instructions.srl_r8(cpu, 'c'); break;
        case alias.SRL_D: instructions.srl_r8(cpu, 'd'); break;
        case alias.SRL_E: instructions.srl_r8(cpu, 'e'); break;
        case alias.SRL_H: instructions.srl_r8(cpu, 'h'); break;
        case alias.SRL_L: instructions.srl_r8(cpu, 'l'); break;
        case alias.SRL_REF_HL: instructions.srl_ref_r16(cpu, 'hl'); break;
        case alias.SRL_A: instructions.srl_r8(cpu, 'a'); break;
        case alias.BIT_0_B: instructions.bit_x_r8(cpu, 0, 'b'); break;
        case alias.BIT_0_C: instructions.bit_x_r8(cpu, 0, 'c'); break;
        case alias.BIT_0_D: instructions.bit_x_r8(cpu, 0, 'd'); break;
        case alias.BIT_0_E: instructions.bit_x_r8(cpu, 0, 'e'); break;
        case alias.BIT_0_H: instructions.bit_x_r8(cpu, 0, 'h'); break;
        case alias.BIT_0_L: instructions.bit_x_r8(cpu, 0, 'l'); break;
        case alias.BIT_0_REF_HL: instructions.bit_x_ref_r16(cpu, 0, 'hl'); break;
        case alias.BIT_0_A: instructions.bit_x_r8(cpu, 0, 'a'); break;
        case alias.BIT_1_B: instructions.bit_x_r8(cpu, 1, 'b'); break;
        case alias.BIT_1_C: instructions.bit_x_r8(cpu, 1, 'c'); break;
        case alias.BIT_1_D: instructions.bit_x_r8(cpu, 1, 'd'); break;
        case alias.BIT_1_E: instructions.bit_x_r8(cpu, 1, 'e'); break;
        case alias.BIT_1_H: instructions.bit_x_r8(cpu, 1, 'h'); break;
        case alias.BIT_1_L: instructions.bit_x_r8(cpu, 1, 'l'); break;
        case alias.BIT_1_REF_HL: instructions.bit_x_ref_r16(cpu, 1, 'hl'); break;
        case alias.BIT_1_A: instructions.bit_x_r8(cpu, 1, 'a'); break;
        case alias.BIT_2_B: instructions.bit_x_r8(cpu, 2, 'b'); break;
        case alias.BIT_2_C: instructions.bit_x_r8(cpu, 2, 'c'); break;
        case alias.BIT_2_D: instructions.bit_x_r8(cpu, 2, 'd'); break;
        case alias.BIT_2_E: instructions.bit_x_r8(cpu, 2, 'e'); break;
        case alias.BIT_2_H: instructions.bit_x_r8(cpu, 2, 'h'); break;
        case alias.BIT_2_L: instructions.bit_x_r8(cpu, 2, 'l'); break;
        case alias.BIT_2_REF_HL: instructions.bit_x_ref_r16(cpu, 2, 'hl'); break;
        case alias.BIT_2_A: instructions.bit_x_r8(cpu, 2, 'a'); break;
        case alias.BIT_3_B: instructions.bit_x_r8(cpu, 3, 'b'); break;
        case alias.BIT_3_C: instructions.bit_x_r8(cpu, 3, 'c'); break;
        case alias.BIT_3_D: instructions.bit_x_r8(cpu, 3, 'd'); break;
        case alias.BIT_3_E: instructions.bit_x_r8(cpu, 3, 'e'); break;
        case alias.BIT_3_H: instructions.bit_x_r8(cpu, 3, 'h'); break;
        case alias.BIT_3_L: instructions.bit_x_r8(cpu, 3, 'l'); break;
        case alias.BIT_3_REF_HL: instructions.bit_x_ref_r16(cpu, 3, 'hl'); break;
        case alias.BIT_3_A: instructions.bit_x_r8(cpu, 3, 'a'); break;
        case alias.BIT_4_B: instructions.bit_x_r8(cpu, 4, 'b'); break;
        case alias.BIT_4_C: instructions.bit_x_r8(cpu, 4, 'c'); break;
        case alias.BIT_4_D: instructions.bit_x_r8(cpu, 4, 'd'); break;
        case alias.BIT_4_E: instructions.bit_x_r8(cpu, 4, 'e'); break;
        case alias.BIT_4_H: instructions.bit_x_r8(cpu, 4, 'h'); break;
        case alias.BIT_4_L: instructions.bit_x_r8(cpu, 4, 'l'); break;
        case alias.BIT_4_REF_HL: instructions.bit_x_ref_r16(cpu, 4, 'hl'); break;
        case alias.BIT_4_A: instructions.bit_x_r8(cpu, 4, 'a'); break;
        case alias.BIT_5_B: instructions.bit_x_r8(cpu, 5, 'b'); break;
        case alias.BIT_5_C: instructions.bit_x_r8(cpu, 5, 'c'); break;
        case alias.BIT_5_D: instructions.bit_x_r8(cpu, 5, 'd'); break;
        case alias.BIT_5_E: instructions.bit_x_r8(cpu, 5, 'e'); break;
        case alias.BIT_5_H: instructions.bit_x_r8(cpu, 5, 'h'); break;
        case alias.BIT_5_L: instructions.bit_x_r8(cpu, 5, 'l'); break;
        case alias.BIT_5_REF_HL: instructions.bit_x_ref_r16(cpu, 5, 'hl'); break;
        case alias.BIT_5_A: instructions.bit_x_r8(cpu, 5, 'a'); break;
        case alias.BIT_6_B: instructions.bit_x_r8(cpu, 6, 'b'); break;
        case alias.BIT_6_C: instructions.bit_x_r8(cpu, 6, 'c'); break;
        case alias.BIT_6_D: instructions.bit_x_r8(cpu, 6, 'd'); break;
        case alias.BIT_6_E: instructions.bit_x_r8(cpu, 6, 'e'); break;
        case alias.BIT_6_H: instructions.bit_x_r8(cpu, 6, 'h'); break;
        case alias.BIT_6_L: instructions.bit_x_r8(cpu, 6, 'l'); break;
        case alias.BIT_6_REF_HL: instructions.bit_x_ref_r16(cpu, 6, 'hl'); break;
        case alias.BIT_6_A: instructions.bit_x_r8(cpu, 6, 'a'); break;
        case alias.BIT_7_B: instructions.bit_x_r8(cpu, 7, 'b'); break;
        case alias.BIT_7_C: instructions.bit_x_r8(cpu, 7, 'c'); break;
        case alias.BIT_7_D: instructions.bit_x_r8(cpu, 7, 'd'); break;
        case alias.BIT_7_E: instructions.bit_x_r8(cpu, 7, 'e'); break;
        case alias.BIT_7_H: instructions.bit_x_r8(cpu, 7, 'h'); break;
        case alias.BIT_7_L: instructions.bit_x_r8(cpu, 7, 'l'); break;
        case alias.BIT_7_REF_HL: instructions.bit_x_ref_r16(cpu, 7, 'hl'); break;
        case alias.BIT_7_A: instructions.bit_x_r8(cpu, 7, 'a'); break;
        case alias.RES_0_B: instructions.res_x_r8(cpu, 0, 'b'); break;
        case alias.RES_0_C: instructions.res_x_r8(cpu, 0, 'c'); break;
        case alias.RES_0_D: instructions.res_x_r8(cpu, 0, 'd'); break;
        case alias.RES_0_E: instructions.res_x_r8(cpu, 0, 'e'); break;
        case alias.RES_0_H: instructions.res_x_r8(cpu, 0, 'h'); break;
        case alias.RES_0_L: instructions.res_x_r8(cpu, 0, 'l'); break;
        case alias.RES_0_REF_HL: instructions.res_x_ref_r16(cpu, 0, 'hl'); break;
        case alias.RES_0_A: instructions.res_x_r8(cpu, 0, 'a'); break;
        case alias.RES_1_B: instructions.res_x_r8(cpu, 1, 'b'); break;
        case alias.RES_1_C: instructions.res_x_r8(cpu, 1, 'c'); break;
        case alias.RES_1_D: instructions.res_x_r8(cpu, 1, 'd'); break;
        case alias.RES_1_E: instructions.res_x_r8(cpu, 1, 'e'); break;
        case alias.RES_1_H: instructions.res_x_r8(cpu, 1, 'h'); break;
        case alias.RES_1_L: instructions.res_x_r8(cpu, 1, 'l'); break;
        case alias.RES_1_REF_HL: instructions.res_x_ref_r16(cpu, 1, 'hl'); break;
        case alias.RES_1_A: instructions.res_x_r8(cpu, 1, 'a'); break;
        case alias.RES_2_B: instructions.res_x_r8(cpu, 2, 'b'); break;
        case alias.RES_2_C: instructions.res_x_r8(cpu, 2, 'c'); break;
        case alias.RES_2_D: instructions.res_x_r8(cpu, 2, 'd'); break;
        case alias.RES_2_E: instructions.res_x_r8(cpu, 2, 'e'); break;
        case alias.RES_2_H: instructions.res_x_r8(cpu, 2, 'h'); break;
        case alias.RES_2_L: instructions.res_x_r8(cpu, 2, 'l'); break;
        case alias.RES_2_REF_HL: instructions.res_x_ref_r16(cpu, 2, 'hl'); break;
        case alias.RES_2_A: instructions.res_x_r8(cpu, 2, 'a'); break;
        case alias.RES_3_B: instructions.res_x_r8(cpu, 3, 'b'); break;
        case alias.RES_3_C: instructions.res_x_r8(cpu, 3, 'c'); break;
        case alias.RES_3_D: instructions.res_x_r8(cpu, 3, 'd'); break;
        case alias.RES_3_E: instructions.res_x_r8(cpu, 3, 'e'); break;
        case alias.RES_3_H: instructions.res_x_r8(cpu, 3, 'h'); break;
        case alias.RES_3_L: instructions.res_x_r8(cpu, 3, 'l'); break;
        case alias.RES_3_REF_HL: instructions.res_x_ref_r16(cpu, 3, 'hl'); break;
        case alias.RES_3_A: instructions.res_x_r8(cpu, 3, 'a'); break;
        case alias.RES_4_B: instructions.res_x_r8(cpu, 4, 'b'); break;
        case alias.RES_4_C: instructions.res_x_r8(cpu, 4, 'c'); break;
        case alias.RES_4_D: instructions.res_x_r8(cpu, 4, 'd'); break;
        case alias.RES_4_E: instructions.res_x_r8(cpu, 4, 'e'); break;
        case alias.RES_4_H: instructions.res_x_r8(cpu, 4, 'h'); break;
        case alias.RES_4_L: instructions.res_x_r8(cpu, 4, 'l'); break;
        case alias.RES_4_REF_HL: instructions.res_x_ref_r16(cpu, 4, 'hl'); break;
        case alias.RES_4_A: instructions.res_x_r8(cpu, 4, 'a'); break;
        case alias.RES_5_B: instructions.res_x_r8(cpu, 5, 'b'); break;
        case alias.RES_5_C: instructions.res_x_r8(cpu, 5, 'c'); break;
        case alias.RES_5_D: instructions.res_x_r8(cpu, 5, 'd'); break;
        case alias.RES_5_E: instructions.res_x_r8(cpu, 5, 'e'); break;
        case alias.RES_5_H: instructions.res_x_r8(cpu, 5, 'h'); break;
        case alias.RES_5_L: instructions.res_x_r8(cpu, 5, 'l'); break;
        case alias.RES_5_REF_HL: instructions.res_x_ref_r16(cpu, 5, 'hl'); break;              
        case alias.RES_5_A: instructions.res_x_r8(cpu, 5, 'a'); break;
        case alias.RES_6_B: instructions.res_x_r8(cpu, 6, 'b'); break;
        case alias.RES_6_C: instructions.res_x_r8(cpu, 6, 'c'); break;
        case alias.RES_6_D: instructions.res_x_r8(cpu, 6, 'd'); break;
        case alias.RES_6_E: instructions.res_x_r8(cpu, 6, 'e'); break;
        case alias.RES_6_H: instructions.res_x_r8(cpu, 6, 'h'); break;
        case alias.RES_6_L: instructions.res_x_r8(cpu, 6, 'l'); break;
        case alias.RES_6_REF_HL: instructions.res_x_ref_r16(cpu, 6, 'hl'); break;
        case alias.RES_6_A: instructions.res_x_r8(cpu, 6, 'a'); break;
        case alias.RES_7_B: instructions.res_x_r8(cpu, 7, 'b'); break;
        case alias.RES_7_C: instructions.res_x_r8(cpu, 7, 'c'); break;
        case alias.RES_7_D: instructions.res_x_r8(cpu, 7, 'd'); break;
        case alias.RES_7_E: instructions.res_x_r8(cpu, 7, 'e'); break;
        case alias.RES_7_H: instructions.res_x_r8(cpu, 7, 'h'); break;
        case alias.RES_7_L: instructions.res_x_r8(cpu, 7, 'l'); break;
        case alias.RES_7_REF_HL: instructions.res_x_ref_r16(cpu, 7, 'hl'); break;
        case alias.RES_7_A: instructions.res_x_r8(cpu, 7, 'a'); break;
        case alias.SET_0_B: instructions.set_x_r8(cpu, 0, 'b'); break;
        case alias.SET_0_C: instructions.set_x_r8(cpu, 0, 'c'); break;
        case alias.SET_0_D: instructions.set_x_r8(cpu, 0, 'd'); break;
        case alias.SET_0_E: instructions.set_x_r8(cpu, 0, 'e'); break;
        case alias.SET_0_H: instructions.set_x_r8(cpu, 0, 'h'); break;
        case alias.SET_0_L: instructions.set_x_r8(cpu, 0, 'l'); break;
        case alias.SET_0_REF_HL: instructions.set_x_ref_r16(cpu, 0, 'hl'); break;
        case alias.SET_0_A: instructions.set_x_r8(cpu, 0, 'a'); break;
        case alias.SET_1_B: instructions.set_x_r8(cpu, 1, 'b'); break;
        case alias.SET_1_C: instructions.set_x_r8(cpu, 1, 'c'); break;
        case alias.SET_1_D: instructions.set_x_r8(cpu, 1, 'd'); break;
        case alias.SET_1_E: instructions.set_x_r8(cpu, 1, 'e'); break;
        case alias.SET_1_H: instructions.set_x_r8(cpu, 1, 'h'); break;
        case alias.SET_1_L: instructions.set_x_r8(cpu, 1, 'l'); break;
        case alias.SET_1_REF_HL: instructions.set_x_ref_r16(cpu, 1, 'hl'); break;
        case alias.SET_1_A: instructions.set_x_r8(cpu, 1, 'a'); break;
        case alias.SET_2_B: instructions.set_x_r8(cpu, 2, 'b'); break;
        case alias.SET_2_C: instructions.set_x_r8(cpu, 2, 'c'); break;
        case alias.SET_2_D: instructions.set_x_r8(cpu, 2, 'd'); break;
        case alias.SET_2_E: instructions.set_x_r8(cpu, 2, 'e'); break;
        case alias.SET_2_H: instructions.set_x_r8(cpu, 2, 'h'); break;
        case alias.SET_2_L: instructions.set_x_r8(cpu, 2, 'l'); break;
        case alias.SET_2_REF_HL: instructions.set_x_ref_r16(cpu, 2, 'hl'); break;
        case alias.SET_2_A: instructions.set_x_r8(cpu,2, 'a'); break;
        case alias.SET_3_B: instructions.set_x_r8(cpu, 3, 'b'); break;
        case alias.SET_3_C: instructions.set_x_r8(cpu, 3, 'c'); break;
        case alias.SET_3_D: instructions.set_x_r8(cpu, 3, 'd'); break;
        case alias.SET_3_E: instructions.set_x_r8(cpu, 3, 'e'); break;
        case alias.SET_3_H: instructions.set_x_r8(cpu, 3, 'h'); break;
        case alias.SET_3_L: instructions.set_x_r8(cpu, 3, 'l'); break;
        case alias.SET_3_REF_HL: instructions.set_x_ref_r16(cpu, 3, 'hl'); break;
        case alias.SET_3_A: instructions.set_x_r8(cpu, 3, 'a'); break;
        case alias.SET_4_B: instructions.set_x_r8(cpu, 4, 'b'); break;
        case alias.SET_4_C: instructions.set_x_r8(cpu, 4, 'c'); break;
        case alias.SET_4_D: instructions.set_x_r8(cpu, 4, 'd'); break;
        case alias.SET_4_E: instructions.set_x_r8(cpu, 4, 'e'); break;
        case alias.SET_4_H: instructions.set_x_r8(cpu, 4, 'h'); break;
        case alias.SET_4_L: instructions.set_x_r8(cpu, 4, 'l'); break;
        case alias.SET_4_REF_HL: instructions.set_x_ref_r16(cpu, 4, 'hl'); break;
        case alias.SET_4_A: instructions.set_x_r8(cpu, 4, 'a'); break;
        case alias.SET_5_B: instructions.set_x_r8(cpu, 5, 'b'); break;
        case alias.SET_5_C: instructions.set_x_r8(cpu, 5, 'c'); break;
        case alias.SET_5_D: instructions.set_x_r8(cpu, 5, 'd'); break;
        case alias.SET_5_E: instructions.set_x_r8(cpu, 5, 'e'); break;
        case alias.SET_5_H: instructions.set_x_r8(cpu, 5, 'h'); break;
        case alias.SET_5_L: instructions.set_x_r8(cpu, 5, 'l'); break;
        case alias.SET_5_REF_HL: instructions.set_x_ref_r16(cpu, 5, 'hl'); break;
        case alias.SET_5_A: instructions.set_x_r8(cpu, 5, 'hl'); break;
        case alias.SET_6_B: instructions.set_x_r8(cpu, 6, 'b'); break;
        case alias.SET_6_C: instructions.set_x_r8(cpu, 6, 'c'); break;
        case alias.SET_6_D: instructions.set_x_r8(cpu, 6, 'd'); break;
        case alias.SET_6_E: instructions.set_x_r8(cpu, 6, 'e'); break;
        case alias.SET_6_H: instructions.set_x_r8(cpu, 6, 'h'); break;
        case alias.SET_6_L: instructions.set_x_r8(cpu, 6, 'l'); break;
        case alias.SET_6_REF_HL: instructions.set_x_ref_r16(cpu, 6, 'hl'); break;
        case alias.SET_6_A: instructions.set_x_r8(cpu, 6, 'a'); break;
        case alias.SET_7_B: instructions.set_x_r8(cpu, 7, 'b'); break;
        case alias.SET_7_C: instructions.set_x_r8(cpu, 7, 'c'); break;
        case alias.SET_7_D: instructions.set_x_r8(cpu, 7, 'd'); break;
        case alias.SET_7_E: instructions.set_x_r8(cpu, 7, 'e'); break;
        case alias.SET_7_H: instructions.set_x_r8(cpu, 7, 'h'); break;
        case alias.SET_7_L: instructions.set_x_r8(cpu, 7, 'l'); break;
        case alias.SET_7_REF_HL: instructions.set_x_ref_r16(cpu, 7, 'hl'); break;
        case alias.SET_7_A: instructions.set_x_r8(cpu, 7, 'a'); break;
        default: throw Error(`${instruction} doesn't exist`); break;
    }
}

